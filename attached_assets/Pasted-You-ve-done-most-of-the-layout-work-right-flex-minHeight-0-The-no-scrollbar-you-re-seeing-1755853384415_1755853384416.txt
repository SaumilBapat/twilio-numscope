You’ve done most of the layout work right (flex + `minHeight="0"`). The “no scrollbar” you’re seeing in the middle column is mainly because:

1. You’re styling the scrollbar with a `css={...}` prop that Paste’s `<Box>` doesn’t consume.

   * Chrome ignores `scrollbarWidth/scrollbarColor` (Firefox-only), and your `::-webkit-scrollbar` rules never apply because `css` isn’t wired up.
   * On macOS the default overlay scrollbar is hidden until you scroll, which looks like “no scrollbar”.

2. The scroll thumb can also get visually clipped against the Card edge with rounded corners.

### Minimal fix (works in Chrome/Safari/Firefox)

* Keep the scroll container as a flex child with `flex="1" minHeight="0"`.
* Drop the `css={...}` block on `<Box>`.
* Add `overflowY="auto"` (explicit), a small right padding so overlay scrollbars don’t hug the rounded edge, and (optionally) a thin border to make the scrollable region obvious.
* Add `minHeight="0"` to the **3-column wrapper** too (lets children actually shrink and scroll).

#### Patch (only the parts that change)

```tsx
// 3-column wrapper
<Box
  display="flex"
  height="calc(100vh - 80px)"
  position="relative"
  minHeight="0"                 // ✅ allow children to shrink
>
  {/* ... */}
</Box>

// Middle column
<Box
  flex="2"
  paddingX="space40"
  paddingY="space0"
  paddingTop="space20"
  display="flex"
  flexDirection="column"
  minHeight="0"
>
  <Card padding="space0" display="flex" flexDirection="column" minHeight="0" /* overflow="visible" optional */>
    {/* Chat header ... */}

    {/* Scroll area */}
    <Box
      flex="1"
      minHeight="0"
      padding="space40"
      overflowY="auto"          // ✅ explicit vertical scrolling
      // remove the css={...} block; Paste Box won’t apply it
      style={{
        scrollBehavior: 'smooth',
        WebkitOverflowScrolling: 'touch'
      }}
      paddingRight="space40"    // ✅ keeps overlay scrollbar clear of the clipped edge
      backgroundColor="colorBackgroundBody"
      borderRightWidth="borderWidth0" // optional visual tweak
    >
      <AIChatLog>{/* ... */}</AIChatLog>
      <div ref={messagesEndRef} />
    </Box>

    {/* Composer ... */}
  </Card>
</Box>
```

### If you really want custom scrollbar styling

Put the WebKit pseudo-element rules in a **global** stylesheet or an Emotion `<Global>` (not on `<Box>`):

```tsx
// e.g., in your app shell
<Global
  styles={{
    '.chat-scroll::-webkit-scrollbar': { width: '8px' },
    '.chat-scroll::-webkit-scrollbar-track': { background: '#f7fafc', borderRadius: '4px' },
    '.chat-scroll::-webkit-scrollbar-thumb': { background: '#cbd5e0', borderRadius: '4px' },
    '.chat-scroll::-webkit-scrollbar-thumb:hover': { background: '#a0aec0' }
  }}
/>

// then
<Box className="chat-scroll" overflowY="auto" flex="1" minHeight="0" /* ... */>
```

(Keep the Firefox `scrollbarWidth/scrollbarColor` if you like, but remember they won’t affect Chrome.)

---

## Extra polish based on your screenshot

* **Tighter gutters in the middle column**
  Reduce left/right padding inside the scroll area on small/medium widths:

  ```tsx
  padding={["space30","space40","space40"]}
  ```

* **Sticky chat header (nice affordance)**
  Make the “Chat Assistant” bar stick while the messages scroll:

  ```tsx
  <Box position="sticky" top="0" zIndex="zIndex20" /* keep your borders/bg */>
  ```

* **Make the composer feel anchored**
  It already sits at the bottom via flex. Add a slightly different background to separate it:

  ```tsx
  backgroundColor="colorBackground"
  ```

* **Right panel visual hierarchy**
  Add a title bar like the left filters for symmetry:

  ```tsx
  <Box padding="space40" borderBottomWidth="borderWidth10" borderBottomColor="colorBorderWeaker" backgroundColor="colorBackgroundWeak">
    <Heading as="h3" variant="heading40">Recommended Numbers</Heading>
  </Box>
  ```

* **Left filters: scroll affordance**
  Give the filters panel its own `overflowY="auto"` and `minHeight="0"` (you already have overflow), and add a subtle gradient fade at the bottom (via a pseudo-element or a small Box) to hint that more content is scrollable.

* **System scrollbar visibility (macOS)**
  On Macs, users can force “Always” show scrollbars in System Settings → Appearance. You can’t control this from the page; the padding/right-gutter trick above keeps the overlay thumb clearly visible when it appears.

Apply the small code patch first; your middle column will scroll reliably and the scrollbar (overlay or custom) will be visible.
